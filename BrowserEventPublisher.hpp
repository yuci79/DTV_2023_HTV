/*
 * Copyright 2014 Vestel.  All rights reserved.
 *
 * @file
 * @brief Browser event publisher sends events to listeners that are interested
 *        in events generated by the browser.
 */

#ifndef CABOT_VEWD_INTEGRATION_CORE_BROWSEREVENTPUBLISHER_HPP_INCLUDED
#define CABOT_VEWD_INTEGRATION_CORE_BROWSEREVENTPUBLISHER_HPP_INCLUDED

#include "nebula/browser_interface/AppType.hpp"
#include "nebula/browser_interface/BrowserProcessState.hpp"
#include "nebula/browser_interface/LoadFailCodes.hpp"
#include "utilities_public/ExplodingBoolean.hpp"
#include "utilities_private/CommandThread.hpp"
#include <vector>

class AnyWebBrowserEventListener;
class AppCreatedNotificationCommand;
class AppTerminatedNotificationCommand;
class AppDocDoneNotificationCommand;
class AppHostChangedNotificationCommand;
class AppContentErrorNotificationCommand;

/** Array of AnyWebBrowserEventListener pointers. */
typedef std::vector<AnyWebBrowserEventListener*> VectorOfAnyWebBrowserEventListenerPtr;

class BrowserEventPublisher
{
public:
    BrowserEventPublisher();
    ~BrowserEventPublisher();

    ExplodingBoolean initialise();

    /**
     * @brief Attach a listener to the publisher
     * @param listener The listener to be attached
     */
    void attach(AnyWebBrowserEventListener* listener);

    /**
     * @brief Detach a listener if it is attached before hand.
     * @param listener The listener to be detached
     */
    void detach(AnyWebBrowserEventListener* listener);

    /**
     * @brief Send Application Created event to listeners
     *
     * @param app_url  The URL of the application that is created
     * @param app_type The type of the application that is created
     * @param broadcast_related Indicates if app is broadcast related or not. Valid for HbbTv apps only.
     * @param linear_ip_service Indicates if created application relates to an Linear IP Service.
     */
    void notifyAppCreated(cabot::String const& app_url,
                          WebBrowserAppType app_type,
                          bool broadcast_related,
                          bool linear_ip_service);

    /**
     * @brief Send Application Terminated event to listeners
     *
     * @param app_url the url of the application terminated
     * @param app_creation_error The flag showing whether the application is
     *                           terminated because of an error
     * @param app_type The type of the application that has terminated
     * @param select_current_service This flag tells to the listeners that it is
     *                               expected that the currect service is to be reselected
     */
    void notifyAppTerminated(cabot::String const& app_url,
                             bool app_creation_error, WebBrowserAppType app_type,
                             bool broadcast_related, bool select_current_service);

    /**
     * @brief Send Application Loaded event to listeners
     * @param url The URL of the application that is loaded
     * @param http_status_code The HTTP protocol status code returned by the server, if relevant.
     */
    void notifyAppDocDone(cabot::String const& url, int const http_status_code);

    /**
     * @brief Send Application Host changed message. This is triggered when a
     *        new URL is being loaded from the current application.
     * @param url The URL of the new page
     */
    void notifyAppHostChanged(cabot::String const& url);

    /**
     * @brief Send content error message
     * @param error_code The error code (404, etc.)
     * @param url of the application
     * @param app_type that generated the error
     * @param is_memory_low Variable that shows if content error occured because memory is low
     * @param is_video_memory_low Variable that shows if video memory is low
     */
    void notifyAppContentError(int error_code, 
                               cabot::String const& url, 
                               WebBrowserAppType app_type, 
                               bool is_memory_low = false,
                               bool is_video_memory_low = false);

    /**
     * @brief Send portal not cached error message
     */
    void onCachedPortalError();

    /**
     * @brief Send browser process state change event
     * @param state The new state of the browser process.
     * @param synchronous If true the call will block until complete.
     */
    void notifyBrowserProcessStateChange(BrowserProcessState state, bool synchronous = false);

    /**
     * @brief Send certificate error event to listeners
     *
     * @param error_code The error code
     * @param app_url Url of requested application
     * @param error_id Id of certificate error
     */
    void notifyCertificateError(int error_code, cabot::String app_url, unsigned int error_id);

private:
    friend class AppCreatedNotificationCommand;
    friend class AppTerminatedNotificationCommand;
    friend class AppDocDoneNotificationCommand;
    friend class AppHostChangedNotificationCommand;
    friend class AppContentErrorNotificationCommand;
    friend class BrowserProcessStateChangeNotificationCommand;
    friend class CertificateErrorNotificationCommand;
    friend class CachedPortalErrorNotificationCommand;

    void internalNotifyAppCreated(cabot::String const& app_url,
            WebBrowserAppType app_type, bool broadcast_related, bool linear_ip_service);
    void internalNotifyAppTerminated(cabot::String const& url, bool app_creation_error,
            WebBrowserAppType app_type, bool broadcast_related, bool reselect_current_service);
    void internalNotifyAppDocDone(cabot::String const& url, int const http_status_code);
    void internalNotifyAppHostChanged(cabot::String const& url);
    void internalNotifyAppContentError(int error_code, 
                                       cabot::String const& url, 
                                       WebBrowserAppType app_type, 
                                       bool is_memory_low,
                                       bool is_video_memory_low);
    void internalNotifyBrowserProcessStateChange(BrowserProcessState state);
    void internalNotifyCertificateError(int error_code, cabot::String app_url, unsigned int error_id);

private:
    mutable FrostMutex m_browser_event_listeners_mutex;
    typedef VectorOfAnyWebBrowserEventListenerPtr::iterator ListenerIterator;
    VectorOfAnyWebBrowserEventListenerPtr m_browser_event_listeners;

    CommandThread m_commands;
};

#endif
