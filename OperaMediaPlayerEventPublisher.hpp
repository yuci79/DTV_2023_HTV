/*
 * Copyright 2022 Vestel.  All rights reserved.
 *
 * @file
 * @brief Media Player event publisher sends events to listeners that are interested
 *        in events generated by the browser.
 */

#ifndef CABOT_VEWD_INTEGRATION_CORE_OPERAMEDIAPLAYEREVENTPUBLISHER_HPP_INCLUDED
#define CABOT_VEWD_INTEGRATION_CORE_OPERAMEDIAPLAYEREVENTPUBLISHER_HPP_INCLUDED

#include "utilities_public/ExplodingBoolean.hpp"
#include "utilities_public/FrostMutex.hpp"
#include <vector>

class AnyWebBrowserMediaPlayerEventListener;
class AnyCommandThread;

namespace cabot
{
    class String;
}

class OperaMediaPlayerEventCommand;
class OperaMediaPlayerPlayingCommand;

class OperaMediaPlayerEventPublisher
{
public:
    OperaMediaPlayerEventPublisher();
    ~OperaMediaPlayerEventPublisher() = default;

    ExplodingBoolean initialise(AnyCommandThread& thread);

    /**
     * @brief Attach a listener to the publisher.
     * @param listener The listener to be attached.
     */
    void attach(AnyWebBrowserMediaPlayerEventListener* listener);

    /**
     * @brief Detach a listener if it is attached before hand.
     * @param listener The listener to be detached.
     */
    void detach(AnyWebBrowserMediaPlayerEventListener* listener);

    /**
     * @brief This method is called by the browser to notify of the Media Player playing state.
     * @param is_playing Whether at least one MediaObject (i.e. Video/Audio/Subtitle) is signalled
     * as playing.
     */
    void notifyPlayingState(bool const is_playing);
    
    /**
     * @brief This method is called by the browser to notify that the Media Player has started.
     * @param url The url of the media file.
     */
    void notifyUrlLoadingFinished(cabot::String const& url);

    /**
     * @brief This method is called by the browser to notify that the Media Player has raised an
     * error.
     * @param url The url of the media file.
     */
    void notifyPlayerError(cabot::String const& url);
 
    /**
     * @brief This method is called by the browser to notify the Media player has terminated.
     * @param url The url of the media file.
     */
    void notifyPlayerTerminated(cabot::String const& url);

    OperaMediaPlayerEventPublisher(OperaMediaPlayerEventPublisher const& rhs) = delete;
    OperaMediaPlayerEventPublisher& operator=(OperaMediaPlayerEventPublisher const& rhs) = delete;

    friend OperaMediaPlayerEventCommand;
    friend OperaMediaPlayerPlayingCommand;

private:
    void internalPlayerStarted(cabot::String const& url);
    void internalPlayerError(cabot::String const& url);
    void internalPlayerTerminated(cabot::String const& url);
    void internalPlayingState(bool const is_playing);
    
    AnyCommandThread* m_thread = nullptr;
    mutable FrostMutex m_listeners_mutex;
    bool m_listeners_mutex_initialised = false;
    std::vector<AnyWebBrowserMediaPlayerEventListener*> m_event_listeners;
};

#endif
