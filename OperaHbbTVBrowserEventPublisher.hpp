/*
 * Copyright 2017 Vestel.  All rights reserved.
 *
 * @file
 * @brief HBBTV Browser event publisher sends events to listeners that are interested
 *        in events generated by the browser.
 */

#ifndef CABOT_VEWD_INTEGRATION_CORE_OPERAHBBTVBROWSEREVENTPUBLISHER_HPP_INCLUDED
#define CABOT_VEWD_INTEGRATION_CORE_OPERAHBBTVBROWSEREVENTPUBLISHER_HPP_INCLUDED

#include "utilities_public/ExplodingBoolean.hpp"
#include "utilities_public/FrostMutex.hpp"
#include <vector>

class AnyWebBrowserHbbTVEventListener;
class AnyCommandThread;

namespace cabot
{
    class String;
}

namespace omi
{
    namespace evt
    {
        class AITParsingStatus;
        class HbbTVApplicationStarted;
        class HbbTVBroadcastRelatedStatusChanged;
        class HbbTVAITAppLoadRequest;
        class HbbTVAppURLLoadRequest;
    };
};

namespace vewd_integ
{  
    class HbbTVApplicationStopped;
}

class AitAppLoadRequestCommand;
class AitParsingStatusCommand;
class AppUrlLoadRequestCommand;
class NotStartedNotificationCommand;
class NotStartedOnUrlNotificationCommand;
class StartedNotificationCommand;
class StoppedNotificationCommand;
class SuspendedNotificationCommand;
class ResumedNotificationCommand;
class InitialisedNotificationCommand;
class BroadcastRelatedStatusNotificationCommand;
class UrlChangedCommand;

class OperaHbbTVBrowserEventPublisher
{
public:
    OperaHbbTVBrowserEventPublisher();
    ~OperaHbbTVBrowserEventPublisher();

    ExplodingBoolean initialise(AnyCommandThread & thread);

    /**
     * @brief Attach a listener to the publisher
     * @param listener The listener to be attached
     */
    void attach(AnyWebBrowserHbbTVEventListener* listener);

    /**
     * @brief Detach a listener if it is attached before hand.
     * @param listener The listener to be detached
     */
    void detach(AnyWebBrowserHbbTVEventListener* listener);

    void notifyAitParsingStatus(omi::evt::AITParsingStatus const& ait_parsing_status);
    void notifyHbbTVApplicationNotStarted(const bool ait_parsing);
    void notifyHbbTVApplicationNotStartedOnURL(
        cabot::String const& url,
        const bool load_aborted);
    void notifyHbbTVApplicationStarted(omi::evt::HbbTVApplicationStarted const& application_started);
    void notifyHbbTVApplicationStopped(vewd_integ::HbbTVApplicationStopped const& application_stopped);
    void notifyHbbTVBroadcastRelatedChange
                        (omi::evt::HbbTVBroadcastRelatedStatusChanged const& application);
    void notifyHbbTVAITAppLoadRequest(omi::evt::HbbTVAITAppLoadRequest ait_app_load_request);
    void notifyHbbTVAppURLLoadRequest(omi::evt::HbbTVAppURLLoadRequest  app_url_load_request);

    void notifyHbbTVSuspended();
    void notifyHbbTVResumed();
    void notifyHbbTVInitialised();

    void notifyHbbTVURLChanged(cabot::String const& url);

private:
    friend AitAppLoadRequestCommand;
    friend AitParsingStatusCommand;
    friend AppUrlLoadRequestCommand;
    friend NotStartedNotificationCommand;
    friend NotStartedOnUrlNotificationCommand;
    friend StartedNotificationCommand;
    friend StoppedNotificationCommand;
    friend SuspendedNotificationCommand;
    friend BroadcastRelatedStatusNotificationCommand;
    friend ResumedNotificationCommand;
    friend InitialisedNotificationCommand;
    friend UrlChangedCommand;

    void internalNotifyAitParsingStatus(omi::evt::AITParsingStatus const& ait_parsing_status);
    void internalNotifyAitAppLoadRequest(omi::evt::HbbTVAITAppLoadRequest const& app_load_request);
    void internalNotifyAppUrlLoadRequest(omi::evt::HbbTVAppURLLoadRequest const& url_load_request);
    void internalNotifyNotStarted(
        cabot::String const& url, const bool load_aborted) const;
    void internalNotifyNotStarted(const bool ait_parsing) const;
    void internalNotifyStarted(omi::evt::HbbTVApplicationStarted const& application) const;
    void internalNotifyStopped(vewd_integ::HbbTVApplicationStopped const& application) const;
    void internalNotifyBroadcastStatus
                    (omi::evt::HbbTVBroadcastRelatedStatusChanged const& application) const;
    void internalNotifySuspended() const;
    void internalNotifyResumed() const;
    void internalNotifyInitialised() const;
    void internalNotifyUrlChanged(cabot::String const& url) const;

private:
    AnyCommandThread * m_thread;
    mutable FrostMutex m_listeners_mutex;
    bool m_listeners_mutex_initialised;
    std::vector<AnyWebBrowserHbbTVEventListener*> m_hbbtv_browser_event_listeners;
};
#endif // CABOT_VEWD_INTEGRATION_CORE_OPERAHBBTVBROWSEREVENTPUBLISHER_HPP_INCLUDED
