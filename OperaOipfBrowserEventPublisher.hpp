/*
 * Copyright 2021 Vestel.  All rights reserved.
 *
 * @file
 * @brief OIPF Browser event publisher sends events to listeners that are interested
 *        in events generated by the browser.
 */

#ifndef CABOT_VEWD_INTEGRATION_CORE_OPERAOIPFBROWSEREVENTPUBLISHER_HPP_INCLUDED
#define CABOT_VEWD_INTEGRATION_CORE_OPERAOIPFBROWSEREVENTPUBLISHER_HPP_INCLUDED

#include "utilities_public/ExplodingBoolean.hpp"
#include "utilities_public/FrostMutex.hpp"
#include <vector>

class AnyWebBrowserOipfEventListener;
class AnyCommandThread;

/**
 * @brief Publishes oipf events to registered listeners.
 */
class OperaOipfBrowserEventPublisher
{
public:
    /**
     * @brief Constructor.
     */
    OperaOipfBrowserEventPublisher();

    /**
     * @brief Copy constructor.
     */
    OperaOipfBrowserEventPublisher(OperaOipfBrowserEventPublisher const &) = delete;
    
    /**
     * @brief Assignment operator.
     */
    OperaOipfBrowserEventPublisher & operator=(OperaOipfBrowserEventPublisher const &) = delete;

    /**
     * @brief Initialise before use.
     * @param thread Thread to use for command processing.
     * @return true on success.
     */
    ExplodingBoolean initialise(AnyCommandThread & thread);

    /**
     * @brief Attach a listener to the publisher. The listener will be notified (immediately in 
     * the calling thread) 
     * @param listener The listener to be attached.
     */
    void attach(AnyWebBrowserOipfEventListener* listener);

    /**
     * @brief Detach an attached listener.
     * @param listener The listener to be detached.
     */
    void detach(AnyWebBrowserOipfEventListener* listener);

    /**
     * @brief Notification based on the onOipfApplicationStarted event
     */
    void notifyOipfAppStarted(const char* url);

    /**
     * @brief Notification based on the onOipfApplicationStopped event.
     */
    void notifyOipfAppStopped();
    
    /**
     * @brief Notification based on the onOipfApplicationFailed event.
     */
    void notifyOipfAppFailed();

private:
    class ApplicationStartedCommand;
    class ApplicationStoppedCommand;
    class ApplicationFailedCommand;

    void internalNotifyApplicationStarted(const char* url) const;
    void internalNotifyApplicationStopped() const;
    void internalNotifyApplicationFailed() const;

private:
    AnyCommandThread * m_thread;
    mutable FrostMutex m_listeners_mutex;
    bool m_listeners_mutex_initialised;
    std::vector<AnyWebBrowserOipfEventListener*> m_listeners;
};

#endif // CABOT_VEWD_INTEGRATION_CORE_OPERAOIPFBROWSEREVENTPUBLISHER_HPP_INCLUDED
